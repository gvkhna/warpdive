---
// main user single page app

import HomeLayout from '@/layouts/HomeLayout.astro'
import {drizzle} from 'drizzle-orm/d1'
import {eq} from 'drizzle-orm'
import * as schema from '@/db/schema'
import {decode, sign, verify} from 'hono/jwt'
import {getUserAuthCookie, setFlashCookie} from '@/lib/cookies'
import {getSecret} from '@/secrets'

const userAuthCookie = getUserAuthCookie(Astro)
export const prerender = false

let displayError: Error | undefined = undefined

if (userAuthCookie) {
  const db = drizzle(Astro.locals.runtime.env.DB, {schema})
  const result = await db.query.userSessions.findFirst({
    where: eq(schema.userSessions.sessionToken, userAuthCookie)
  })
  if (result) {
    try {
      // verify session token
      const appSecret = getSecret('APP_SECRET_KEY', Astro)
      const decodedPayload = await verify(userAuthCookie, appSecret, 'HS256')
      console.log(decodedPayload)
    } catch (verifyError) {
      if (verifyError instanceof Error) {
        const errorName = verifyError.name
        switch (errorName) {
          case 'JwtAlgorithmNotImplemented':
            displayError = new Error(`JWT Token verification failed: algorithm not implemented`)
            break
          case 'JwtTokenInvalid':
            displayError = new Error(`JWT Token verification failed: token invalid`)
            break
          case 'JwtTokenNotBefore':
            displayError = new Error(`JWT Token verification failed: token used before valid`)
            break
          case 'JwtTokenExpired':
            // displayError = new Error(`JWT Token verification failed: token expired`)
            // setFlashCookie(displayError.message, Astro)
            return Astro.redirect('/session-expired')
            break
          case 'JwtTokenIssuedAt':
            displayError = new Error(`JWT Token verification failed: incorrect 'iat' claim`)
            break
          case 'JwtTokenSignatureMismatched':
            displayError = new Error(`JWT Token verification failed: token signature mismatch`)
            break
          default:
            console.log(verifyError)
            console.log(verifyError.stack)
            displayError = new Error(`Encountered Unknown Error: ${verifyError}`)
            break
        }
        setFlashCookie(displayError.message, Astro)
        return Astro.redirect('/session-error')
      } else {
        displayError = new Error(`Encountered Unknown Error: ${verifyError}`)
      }
    }
  } else {
    displayError = new Error('Invalid authentication token')
    return Astro.redirect('/signin')
  }
} else {
  displayError = new Error('Unauthenticated user encountered')
  return Astro.redirect('/signin')
}
---

<HomeLayout title='App Dashboard'>
  {displayError ? <h1>{displayError.message}</h1> : <h1>Successful auth</h1>}
</HomeLayout>
